{"version":3,"file":"static/js/339.7551c4a4.chunk.js","mappings":"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","sources":["components/IconButton/IconButton.styled.js","components/IconButton/IconButton.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/ContactForm/ContactForm.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","components/ContactList/Contact/Contact.styled.js","components/ContactList/Contact/Contact.js","utils/random-colors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  position: absolute;\n  right: 20px;\n  margin: 0;\n  padding: 10px;\n  border: none;\n  border-radius: 50%;\n  color: white;\n  font: inherit;\n  background-color: #fecb44;\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './IconButton.styled';\n\nconst IconButton = ({ children, onClick, ...allyProps }) => (\n  <Button type=\"button\" onClick={onClick} {...allyProps}>\n    {children}\n  </Button>\n);\n\nIconButton.defaultProps = {\n  onClick: () => null,\n  children: null,\n};\n\nIconButton.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string.isRequired,\n};\n\nexport default IconButton;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import PropTypes from 'prop-types';\nimport BarLoader from 'react-spinners/BarLoader';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport { Container } from './Loader.styled';\n\nexport const LoaderContact = ({ loading, color, size }) => {\n  return (\n    <ClipLoader\n      color={color}\n      loading={loading}\n      cssOverride={{\n        display: 'block',\n      }}\n      size={size}\n      aria-label=\"Loading Spinner\"\n      data-testid=\"loader\"\n    />\n  );\n};\n\nexport const LoaderContacts = ({ loading, color }) => {\n  return (\n    <Container>\n      <BarLoader\n        height={4}\n        width={280}\n        color={color}\n        loading={loading}\n        cssOverride={{\n          display: 'block',\n        }}\n        aria-label=\"Loading Spinner\"\n        data-testid=\"loader\"\n      />\n    </Container>\n  );\n};\n\nLoaderContact.propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n  size: PropTypes.node,\n};\n\nLoaderContacts.propTypes = {\n  loading: PropTypes.bool,\n  color: PropTypes.string,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport toast from 'react-hot-toast';\nimport { selectContacts, selectOperation } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { LoaderContact } from 'components/Loader/Loader';\n\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme();\n\nexport default function ContactForm({ onClose }) {\n  const contacts = useSelector(selectContacts);\n\n  const operation = useSelector(selectOperation);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.target;\n    const { name, number } = form;\n\n    let value = {\n      name: name.value,\n      number: number.value,\n    };\n    // console.log(value);\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      return toast(`${name.value} is already in contacts.`, {\n        duration: 3000,\n      });\n    }\n\n    const { error } = await dispatch(addContact(value));\n    if (!error) {\n      form.reset();\n      onClose();\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            padding: '20px',\n          }}\n        >\n          <Typography component=\"h2\" variant=\"30px\" sx={{ color: '#fecb44' }}>\n            New Contact\n          </Typography>\n          <Box\n            component=\"form\"\n            // noValidate\n            onSubmit={handleSubmit}\n            sx={{\n              mt: 3,\n              '& label.Mui-focused': {\n                color: '#f9ae17',\n              },\n\n              '& .MuiOutlinedInput-root': {\n                '&.Mui-focused fieldset': {\n                  borderColor: '#fecb44',\n                },\n              },\n            }}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"name\"\n                  label=\"Name contact\"\n                  name=\"name\"\n                  type=\"text\"\n                  autoComplete=\"name\"\n                  autoFocus\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  id=\"number\"\n                  name=\"number\"\n                  label=\"Number\"\n                  type=\"tel\"\n                  // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  autoComplete=\"new-tel\"\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              disabled={operation === 'add'}\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                gap: '20px',\n                mt: 3,\n                mb: 2,\n                bgcolor: '#fecb44',\n                '&:hover': {\n                  bgcolor: '#b13a18',\n                  boxShadow: '0px 0px 5px #e75f28',\n                },\n                '&:focus': {\n                  bgcolor: '#b13a18',\n                  boxShadow: '0px 0px 5px #e75f28',\n                },\n              }}\n            >\n              {operation === 'add' ? (\n                <>\n                  <LoaderContact\n                    color={'#f9ae17'}\n                    size={20}\n                  />\n                  <span>Add ... </span>\n                </>\n              ) : (\n                'Add your contact'\n              )}\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  z-index: 1200;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const ModalWindow = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  background-color: white;\n  transform: translate(-50%, -50%);\n  border-radius: 4px;\n`;\n\n","import { createPortal } from 'react-dom';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ContactForm from 'components/ContactForm';\nimport { Overlay, ModalWindow } from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default class Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyEsc);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyEsc);\n  }\n\n  handleKeyEsc = e => {\n    if (e.code === 'Escape') {\n      //   console.log('Нажали ESC');\n      this.props.onClose();\n    }\n  };\n\n  handleOverlayClick = e => {\n    // console.log('Где ловим/обрабатываем  клик currentTarget: ', event.currentTarget);\n    // console.log('куда кликаем target: ', event.target);\n\n    if (e.currentTarget === e.target) {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <Overlay onClick={this.handleOverlayClick}>\n        <ModalWindow>\n          <ContactForm onClose={() => this.props.onClose()} />\n        </ModalWindow>\n      </Overlay>,\n      modalRoot\n    );\n  }\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 30px;\n  padding: 5px 0;\n`;\n\nexport const Text = styled.p`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n  font-family: inherit;\n  font-size: 15px;\n  flex-grow: 1;\n  span {\n    font-size: 13px;\n  }\n`;\n\nexport const Avatar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: ${props => props.color};\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  margin: 0;\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n  svg {\n    color: #bdbdbd;\n  }\n  &:hover {\n    svg {\n      color: #63a4ff;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RiDeleteBin5Fill } from 'react-icons/ri';\n\nimport { getRandomHexColor, upFirst } from 'utils/index';\nimport { selectOperation } from 'redux/selectors';\nimport { LoaderContact } from 'components/Loader/Loader';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  ContactWrapper,\n  Text,\n  Avatar,\n  Button,\n} from 'components/ContactList/Contact/Contact.styled.js';\n\nexport const Contact = ({ contact: { id, name, number } }) => {\n  const operation = useSelector(selectOperation);\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n   return (\n     <>\n       <ContactWrapper>\n         <Avatar color={getRandomHexColor()}>{upFirst(name)}</Avatar>\n\n         <Text>\n           {name}\n           <span>Number: {number}</span>\n         </Text>\n\n         <Button type=\"button\" onClick={handleDelete}>\n           {operation === id ? (\n             <LoaderContact\n               loading={operation === id}\n               color={'#003b8e'}\n               size={18}\n             />\n           ) : (\n             <RiDeleteBin5Fill size={28} color={'#dd6722'} />\n           )}\n         </Button>\n       </ContactWrapper>\n     </>\n   );\n};\n\nContact.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\n","export const getRandomHexColor = () => {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ContactListItem = styled.li`\n  border-top: 1px solid #5e91f2;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nimport { Contact } from 'components/ContactList/Contact/Contact';\nimport {\n  ContactsList,\n  ContactListItem,\n} from 'components/ContactList/ContactList.styled';\n\nconst ContactList = () => {\n  const visibleСontacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ContactsList>\n      {visibleСontacts.map(contact => (\n        <ContactListItem key={contact.id}>\n          <Contact contact={contact} />\n        </ContactListItem>\n      ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 350px;\n  position: relative;\n  padding: 20px;\n  margin: 0 auto;\n  border: 5px solid #dd6722;\n  border-radius: 50px;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  text-align: center;\n  font-weight: 700;\n  font-size: 30px;\n  color: #dd6722;\n`;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectOperation, selectIsLoading } from 'redux/selectors';\n\nimport IconButton from 'components/IconButton';\nimport Modal from 'components/Modal';\nimport { TbFolderPlus } from 'react-icons/tb';\n\nimport ContactList from 'components/ContactList';\nimport { LoaderContacts } from 'components/Loader/Loader';\nimport { Container, Title } from './Contacts.styled';\n\nconst Contacts = () => {\n  const [isShowModal, setShowModal] = useState(false);\n  const dispatch = useDispatch();\n  const operation = useSelector(selectOperation);\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const toggleModal = () => {\n    setShowModal(!isShowModal);\n  };\n\n  return (\n    <Container>\n      <IconButton onClick={toggleModal} aria-label=\"Add contacts\">\n        <TbFolderPlus width=\"40\" height=\"40\" fill=\"#b13a18\" />\n      </IconButton>\n      {isShowModal && <Modal onClose={toggleModal} />}\n\n      <Title>Contacts</Title>\n\n      {operation === 'fetch' && !error ? (\n        <LoaderContacts loading={isLoading} color={'#2196f3'} />\n      ) : (\n        <ContactList />\n      )}\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["Button","styled","_templateObject","_taggedTemplateLiteral","IconButton","_ref","children","onClick","allyProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","type","defaultProps","Container","LoaderContact","loading","color","size","ClipLoader","cssOverride","display","LoaderContacts","_ref2","BarLoader","height","width","theme","createTheme","ContactForm","onClose","contacts","useSelector","selectContacts","operation","selectOperation","dispatch","useDispatch","handleSubmit","_asyncToGenerator","_regeneratorRuntime","_callee","e","form","name","number","value","_yield$dispatch","_context","prev","next","preventDefault","target","some","contact","toLowerCase","abrupt","toast","concat","duration","addContact","sent","error","reset","stop","_x","apply","arguments","ThemeProvider","_jsxs","component","maxWidth","CssBaseline","Box","sx","flexDirection","alignItems","padding","Typography","variant","onSubmit","mt","borderColor","Grid","container","spacing","item","xs","TextField","required","fullWidth","id","label","autoComplete","autoFocus","disabled","justifyContent","gap","mb","bgcolor","boxShadow","_Fragment","Overlay","ModalWindow","_templateObject2","modalRoot","document","querySelector","Modal","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","length","args","Array","_key","call","handleKeyEsc","code","props","handleOverlayClick","currentTarget","_createClass","key","window","addEventListener","this","removeEventListener","_this2","createPortal","Component","ContactWrapper","Text","Avatar","_templateObject3","_templateObject4","Contact","_ref$contact","Math","floor","random","toString","upFirst","deleteContact","RiDeleteBin5Fill","ContactsList","ContactListItem","visibleСontacts","selectVisibleContacts","map","Title","_useState","useState","_useState2","_slicedToArray","isShowModal","setShowModal","isLoading","selectIsLoading","selectError","useEffect","fetchContacts","toggleModal","TbFolderPlus","fill","ContactList"],"sourceRoot":""}